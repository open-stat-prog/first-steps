[
  {
    "objectID": "tutorials/packages/loading.html",
    "href": "tutorials/packages/loading.html",
    "title": "Loading Packages",
    "section": "",
    "text": "Once you’ve installed a new package, you’re nearly ready to start using the functionality provided by that package, but there’s still one final step: you must load the package into your active R session.\nThe following code produces an error because we’re trying to using the ggplot(), aes(), and geom_boxplot() functions that are provided by the ggplot2 package, but we haven’t yet loaded that package.\n\nggplot(iris, aes(Species, Petal.Length)) + geom_boxplot()\n\nError in ggplot(iris, aes(Species, Petal.Length)): could not find function \"ggplot\"\n\n\nAn R package is really just a small piece of software. Like any other software, you only need to install a given R package once (just like you only need to install RStudio once), but you’ll need to load the package every time you want to use it in a new R session (like you need to open RStudio every time you want to use it).\nWe load R packages with the library() function.\n\nlibrary(dplyr)\n\nThe library() function can only load one package at a time, so you need to call library() multiple times to load multiple packages.\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\nRunning the following code should now produce a simple plot, because we’re loaded the ggplot2 package before trying to use the functions it provides.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Packages",
      "Loading Packages"
    ]
  },
  {
    "objectID": "tutorials/packages/index.html",
    "href": "tutorials/packages/index.html",
    "title": "Add-On Packages",
    "section": "",
    "text": "When you install R, you’re only installing the core set of functionality. You can already do quite a lot with this baseline R installation (e.g., a complete linear regression analysis), but you will usually need functionality provided by add-on packages to complete most real-world data analyses.\nFor example, the following list shows some common analyses for which you would typically use add-on packages (and some suitable packages).\n\nTreating missing data using multiple imputation\n\nmice\nAmelia\nmi\n\nStructural equation modeling\n\nlavaan\nOpenMx\n\nMultilevel regression modeling\n\nlme4\nnlme\n\nFor all but the most trivial data processing, manipulation, and visualization, the tidyverse packages are virtually obligatory.\n\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Packages"
    ]
  },
  {
    "objectID": "tutorials/help/index.html",
    "href": "tutorials/help/index.html",
    "title": "Package Documentation",
    "section": "",
    "text": "Every R function provided by a Core R package or an add-on package distributed through CRAN must come with documentation (AKA, a help file). This documentation always follows the same general structure. Below, you see the documentation for the arrange() function from the dplyr package.\n\n\n\n\n\n\n\n\narrange\nR Documentation\n\n\n\n\n\nOrder rows using column values\n\nDescription\n\narrange() orders the rows of a data frame by the values of selected\ncolumns.\n\nUnlike other dplyr verbs, arrange() largely ignores grouping; you\nneed to explicitly mention grouping variables (or use  .by_group = TRUE)\nin order to group by them, and functions of variables are evaluated\nonce per data frame, not once per group.\n\n\n\nUsage\n\narrange(.data, ..., .by_group = FALSE)\n\n## S3 method for class 'data.frame'\narrange(.data, ..., .by_group = FALSE, .locale = NULL)\n\n\n\nArguments\n\n\n\n\n\n\n\n\n\n.data\nA data frame, data frame extension (e.g. a tibble), or a lazy data frame (e.g. from dbplyr or dtplyr). See Methods, below, for more details.\n\n\n...\n&lt;data-masking&gt; Variables, or functions of variables. Use desc() to sort a variable in descending order.\n\n\n.by_group\nIf TRUE, will sort first by grouping variable. Applies to grouped data frames only.\n\n\n.locale\nThe locale to sort character vectors in.\n\nIf NULL, the default, uses the \"C\" locale unless the dplyr.legacy_locale global option escape hatch is active. See the dplyr-locale help page for more details.\nIf a single string from stringi::stri_locale_list() is supplied, then this will be used as the locale to sort with. For example, \"en\" will sort with the American English locale. This requires the stringi package.\nIf \"C\" is supplied, then character vectors will always be sorted in the C locale. This does not require stringi and is often much faster than supplying a locale identifier.\n\nThe C locale is not the same as English locales, such as \"en\", particularly when it comes to data containing a mix of upper and lower case letters. This is explained in more detail on the locale help page under the ⁠Default locale⁠ section.\n\n\n\n\n\n\nDetails\n\n\n\nMissing values\n\nUnlike base sorting with sort(), NA are:\n\n\n\n always sorted to the end for local data, even when wrapped with desc().\n\n\n treated differently for remote data, depending on the backend.\n\n\n\n\n\n\nValue\n\nAn object of the same type as .data. The output has the following\nproperties:\n\n\n\n All rows appear in the output, but (usually) in a different place.\n\n\n Columns are not modified.\n\n\n Groups are not modified.\n\n\n Data frame attributes are preserved.\n\n\n\n\n\nMethods\n\nThis function is a generic, which means that packages can provide\nimplementations (methods) for other classes. See the documentation of\nindividual methods for extra arguments and differences in behaviour.\n\nThe following methods are currently available in loaded packages:\nno methods found.\n\n\n\nSee Also\n\nOther single table verbs: \nfilter(),\nmutate(),\nreframe(),\nrename(),\nselect(),\nslice(),\nsummarise()\n\n\n\nExamples\n\narrange(mtcars, cyl, disp)\narrange(mtcars, desc(disp))\n\n# grouped arrange ignores groups\nby_cyl &lt;- mtcars %&gt;% group_by(cyl)\nby_cyl %&gt;% arrange(desc(wt))\n# Unless you specifically ask:\nby_cyl %&gt;% arrange(desc(wt), .by_group = TRUE)\n\n# use embracing when wrapping in a function;\n# see ?rlang::args_data_masking for more details\ntidy_eval_arrange &lt;- function(.data, var) {\n  .data %&gt;%\n    arrange({{ var }})\n}\ntidy_eval_arrange(mtcars, mpg)\n\n# Use `across()` or `pick()` to select columns with tidy-select\niris %&gt;% arrange(pick(starts_with(\"Sepal\")))\niris %&gt;% arrange(across(starts_with(\"Sepal\"), desc))\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Documentation"
    ]
  },
  {
    "objectID": "tutorials/help/access.html",
    "href": "tutorials/help/access.html",
    "title": "Accessing Help Files",
    "section": "",
    "text": "The simplest way to access a function’s help file is to prepend the function name (without parentheses) with the ? character. The following code will pull up the documentation for the lm() function.\n\n\n\n\n\n\n\n\nReading\n\n\n\nR4DS 8: Getting Help\n\n\n\n?lm\n\nYou can achieve the same effect by providing the function name to the help() function.\n\nhelp(lm)\nhelp(\"lm\")\n\nA function’s help file comes from the package that provides the function. So, you typically cannot access the help file for a function until you’ve loaded the package that provides that function.\nFor example, the following code will produce an error because we’re trying to access the documentation for arrange(), but we haven’t yet loaded the dplyr package that provides the arrange() function.\n\n?arrange\n\nNo documentation for 'arrange' in specified packages and libraries:\nyou could try '??arrange'\n\n\nWe can still access the help files for functions provided by an unloaded package, though. We just have to tell R which package provides the function (and, hence, where to look for the help file). To do so, either use the namespace resolution operator, ::, or provide a value for the package argument in the help() function.\nThe following two code chunks should run without errors, because we’ve told R to search for the arrange() documentation in the dplyr package\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nPractice\n\n\n\nAccess the help file for the vector() function.\n\nHow many arguments does the vector() function take?\nWhat is the default value of the mode argument?\n\n\n Interactive Editor Hint Solution\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nThe vector() function is provided by the base package, which is loaded every time you start R. So, you should be able to access the help file without loading any additional packages.\n\n\nAccording to the Usage section of vector()’s documentation,\n\nThe vector() function takes 2 arguments: mode and length.\nThe default argument for mode is “logical”.\n\n\n?vector\n\n\n\n\n\n\n\nvector\nR Documentation\n\n\n\n\n\nVectors - Creation, Coercion, etc\n\nDescription\n\nA vector in R is either an atomic vector i.e., one of the atomic\ntypes, see ‘Details’, or of type (typeof) or mode\nlist or expression.\n\nvector produces a ‘simple’ vector of the given length and\nmode, where a ‘simple’ vector has no attribute, i.e., fulfills\nis.null(attributes(.)).\n\nas.vector, a generic, attempts to coerce its argument into a\nvector of mode mode (the default is to coerce to whichever\nvector mode is most convenient): if the result is atomic\n(is.atomic), all attributes are removed.\nFor mode=\"any\", see ‘Details’.\n\nis.vector(x) returns TRUE if x is a vector of the\nspecified mode having no attributes other than names.\nFor mode=\"any\", see ‘Details’.\n\n\n\n\nUsage\n\nvector(mode = \"logical\", length = 0)\nas.vector(x, mode = \"any\")\nis.vector(x, mode = \"any\")\n\n\n\nArguments\n\n\n\n\n\nmode\ncharacter string naming an atomic mode or \"list\" or \"expression\" or (except for vector) \"any\". Currently, is.vector() allows any type (see typeof) for mode, and when mode is not \"any\", is.vector(x, mode) is almost the same as typeof(x) == mode.\n\n\nlength\na non-negative integer specifying the desired length. For a long vector, i.e., length &gt; .Machine$integer.max, it has to be of type \"double\". Supplying an argument of length other than one is an error.\n\n\nx\nan R object.\n\n\n\n\n\n\nDetails\n\nThe atomic modes are \"logical\", \"integer\",\n\"numeric\" (synonym \"double\"), \"complex\",\n\"character\" and \"raw\".\n\nIf mode = \"any\", is.vector may return TRUE for\nthe atomic modes, list and expression.\nFor any mode, it will return FALSE if x has any\nattributes except names.  (This is incompatible with S.)  On the other\nhand, as.vector removes all attributes including names\nfor results of atomic mode.\n\nFor mode = \"any\", and atomic vectors x, as.vector(x)\nstrips all attributes (including names),\nreturning a simple atomic vector. \nHowever, when x is of type \"list\" or\n\"expression\", as.vector(x) currently returns the\nargument x unchanged, unless there is an as.vector method\nfor class(x).\n\nNote that factors are not vectors; is.vector returns\nFALSE and as.vector converts a factor to a character\nvector for mode = \"any\".\n\n\n\nValue\n\nFor vector, a vector of the given length and mode.  Logical\nvector elements are initialized to FALSE, numeric vector\nelements to 0, character vector elements to \"\", raw\nvector elements to nul bytes and list/expression elements to\nNULL.\n\nFor as.vector, a vector (atomic or of type list or expression).\nAll attributes are removed from the result if it is of an atomic mode,\nbut not in general for a list or expression result.  The default method handles 24\ninput types and 12 values of type: the details of most\ncoercions are undocumented and subject to change.\n\nFor is.vector, TRUE or FALSE.\nis.vector(x, mode = \"numeric\") can be true for vectors of types\n\"integer\" or \"double\" whereas is.vector(x, mode =\n  \"double\") can only be true for those of type \"double\".\n\n\n\nMethods for as.vector()\n\nWriters of methods for as.vector need to take care to\nfollow the conventions of the default method.  In particular\n\n\n\n Argument mode can be \"any\", any of the atomic\nmodes, \"list\", \"expression\", \"symbol\",\n\"pairlist\" or one of the aliases \"double\" and \"name\".\n\n\n The return value should be of the appropriate mode.  For\nmode = \"any\" this means an atomic vector or list or expression.\n\n\n Attributes should be treated appropriately: in particular when\nthe result is an atomic vector there should be no attributes, not\neven names.\n\n\n is.vector(as.vector(x, m), m) should be true for any\nmode m, including the default \"any\".\n\nCurrently this is not fulfilled in R when m == \"any\" and\nx is of type list or expression with\nattributes in addition to names — typically the case for\n(S3 or S4) objects (see is.object) which are lists\ninternally.\n\n\n\n\n\nNote\n\nas.vector and is.vector are quite distinct from the\nmeaning of the formal class \"vector\" in the methods\npackage, and hence as(x, \"vector\") and\nis(x, \"vector\").\n\nNote that as.vector(x) is not necessarily a null operation if\nis.vector(x) is true: any names will be removed from an atomic\nvector. \n\n\nNon-vector modes \"symbol\" (synonym \"name\") and\n\"pairlist\" are accepted but have long been undocumented: they\nare used to implement as.name and\nas.pairlist, and those functions should preferably be\nused directly.  None of the description here applies to those\nmodes: see the help for the preferred forms.\n\n\n\nReferences\n\nBecker, R. A., Chambers, J. M. and Wilks, A. R. (1988)\nThe New S Language.\nWadsworth & Brooks/Cole.\n\n\n\nSee Also\n\nc, is.numeric, is.list, etc.\n\n\n\nExamples\n\ndf &lt;- data.frame(x = 1:3, y = 5:7)\n## Error:\ntry(as.vector(data.frame(x = 1:3, y = 5:7), mode = \"numeric\"))\n\nx &lt;- c(a = 1, b = 2)\nis.vector(x)\nas.vector(x)\nall.equal(x, as.vector(x)) ## FALSE\n\n\n###-- All the following are TRUE:\nis.list(df)\n! is.vector(df)\n! is.vector(df, mode = \"list\")\n\nis.vector(list(), mode = \"list\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Documentation",
      "Accessing Help Files"
    ]
  },
  {
    "objectID": "tutorials/functions/functions.html",
    "href": "tutorials/functions/functions.html",
    "title": "Function Basics",
    "section": "",
    "text": "You will almost always be able to quickly identify the functions in R code by the fixed pattern: FUNCTION_NAME(). That is, an R function is called by writing the function name followed immediately by an opening parenthesis The following list shows some commonly encountered R functions.\n\nc()\nlist()\nls()\nsummary()\nmean()\nlm()\n\nSo, anytime you see a word followed by parenthesis in some R code, you know you’ve found a function call.",
    "crumbs": [
      "Open-Stat-Prog",
      "Functions",
      "Function Basics"
    ]
  },
  {
    "objectID": "tutorials/functions/functions.html#how-functions-are-named",
    "href": "tutorials/functions/functions.html#how-functions-are-named",
    "title": "Function Basics",
    "section": "",
    "text": "You will almost always be able to quickly identify the functions in R code by the fixed pattern: FUNCTION_NAME(). That is, an R function is called by writing the function name followed immediately by an opening parenthesis The following list shows some commonly encountered R functions.\n\nc()\nlist()\nls()\nsummary()\nmean()\nlm()\n\nSo, anytime you see a word followed by parenthesis in some R code, you know you’ve found a function call.",
    "crumbs": [
      "Open-Stat-Prog",
      "Functions",
      "Function Basics"
    ]
  },
  {
    "objectID": "tutorials/functions/functions.html#how-functions-work",
    "href": "tutorials/functions/functions.html#how-functions-work",
    "title": "Function Basics",
    "section": "How Functions Work",
    "text": "How Functions Work\nIn most cases, R functions work in the same way as mathematical functions:\n\nAccept some input\nPerform some operation on the input\nReturn the results of the operation\n\nFor example, the following equation represents a linear function of \\(x\\).\n\\[\nf(x) = 1.5 + 2x\n\\]\nFor any value of \\(x\\) that we provide as input, \\(f(x)\\) will first multiply that value by 3 and then add 1.5 to the resulting product. So, if we let \\(x = 3\\), we get \\(f(3) = 7.5\\).\n\\[\n\\begin{align*}\nf(3) &= 1.5 + 2 \\times 3\\\\\n&= 7.5\n\\end{align*}\n\\]\nThe mean() function that we used to motivate these ideas operates through the same conceptual process. In terms of a mathematical function, you can think of the R function call mean(1:5) as supplying the input \\(x = [1, 2, 3, 4, 5]\\) to a function, \\(f(x)\\), that computes the arithmetic mean of the values in \\(x\\).\nIf we let \\(n\\) represent the number of values in \\(x\\), we could notate the mathematical representation of the mean() function as follows.\n\\[\n\\begin{align}\nf(x) = \\frac{1}{n}\\sum_{i = 1}^{n} x_i\n\\end{align}\n\\tag{1}\\]\nIn programming jargon, we would call Equation 1 the definition of the mean function. That is, we’ve defined a tool that we can use to compute the mean of any given set of values, but we haven’t yet used that tool to compute an actual mean.\nTo use our defined function to compute a mean, we need to apply \\(f(x)\\) to some input, say, \\(a = [1, \\ldots, 5]\\). After replacing the variable \\(x\\) on the right hand side of Equation 1 with the input data \\(a\\), we can compute the mean, \\(f(a)\\).\n\\[\n\\begin{align*}\nf(a) &= \\frac{1 + 2 + 3 + 4 + 5}{5}\\\\\n&= 3\n\\end{align*}\n\\]\nDoing the analogous calculation in R would look like the following.\n\na &lt;- 1:5\nmean(a)\n\n[1] 3\n\n\nIn most of your R analyses, you won’t need to worry about defining the functions you use: that work has already been done by the developers who wrote the packages you’re using. You will usually only have to worry about preparing the inputs, calling an appropriate function, and processing the function’s output.",
    "crumbs": [
      "Open-Stat-Prog",
      "Functions",
      "Function Basics"
    ]
  },
  {
    "objectID": "tutorials/functions/functions.html#calling-functions",
    "href": "tutorials/functions/functions.html#calling-functions",
    "title": "Function Basics",
    "section": "Calling Functions",
    "text": "Calling Functions\n\n\n\n\n\n\n\n\nReading\n\n\n\nR4DS 2.4: Calling Functions\n\n\nWhen you call an R function, you will specify the function inputs by defining values for the function’s arguments. R function arguments are named, and most R functions have multiple arguments. You specify the argument values by writing a comma-separated list of name-value pairs between the parentheses of the function call. For example, the following code creates a vector of 100 random normal deviates, dat, and computes the trimmed mean of dat excluding the most extreme 10% of the values.\n\ndat &lt;- rnorm(n = 100)\nmean(x = dat, trim = 0.05)\n\n[1] 0.01313535\n\n\nThere are some nuances to how we specify the arguments when we call an R function. Most importantly, we don’t always need to explicitly write out the argument’s name, and we don’t necessarily need to provide a value for all arguments. Before we can make much headway on these finer points, however, we need to answer a couple unresolved questions:\n\nWhere are all these mysterious R functions defined, and how do I access new functions?\nHow do I know a function’s arguments and what values to specify for those arguments?\n\nIn the next two tutorials, you will learn about R packages (the source of most R functions) and R’s documentation system (the means by which you will learn how to use new functions). We will revisit the finer points of calling R functions when we discuss documentation.",
    "crumbs": [
      "Open-Stat-Prog",
      "Functions",
      "Function Basics"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/logical_comparisons.html",
    "href": "tutorials/basic_commands/logical_comparisons.html",
    "title": "Logical Comparisons",
    "section": "",
    "text": "We can tests many flavors of logical conditions in R. Logical tests return a logical vector as the result. A logical vector takes the value of TRUE whenever the tested condition is satisfied and FALSE when the tested condition is not satisfied.",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Logical Comparisons"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/logical_comparisons.html#equality",
    "href": "tutorials/basic_commands/logical_comparisons.html#equality",
    "title": "Logical Comparisons",
    "section": "Equality",
    "text": "Equality\nThe simplest logical test is an equality check. To check if two objects are equal, we use the ‘equality operator’, ==.\n\n## Define some objects to play with\ny &lt;- 5\nx &lt;- 7\nw &lt;- 5\n\n### Check equality\ny == x\n\n[1] FALSE\n\ny == w\n\n[1] TRUE",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Logical Comparisons"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/logical_comparisons.html#greaterlesser",
    "href": "tutorials/basic_commands/logical_comparisons.html#greaterlesser",
    "title": "Logical Comparisons",
    "section": "Greater/Lesser",
    "text": "Greater/Lesser\nWe can also check the usual greater-than/less-than conditions with &gt;, &lt;, &gt;=, &lt;=.\n\ny &gt; x  # greater than\n\n[1] FALSE\n\ny &gt;= x # greater than or equal to\n\n[1] FALSE\n\ny &lt; x  # less than\n\n[1] TRUE\n\ny &lt;= x # less than or equal to\n\n[1] TRUE\n\n\n\n\n\n\n\n\nPractice\n\n\n\nWhat values will the following four expressions return?\n\n Question Solution\n\n\n\ny &gt; w\ny &gt;= w\ny &lt; w\ny &lt;= w\n\n\n\n\ny &gt; w\n\n[1] FALSE\n\ny &gt;= w\n\n[1] TRUE\n\ny &lt; w\n\n[1] FALSE\n\ny &lt;= w\n\n[1] TRUE",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Logical Comparisons"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/logical_comparisons.html#logical-negation",
    "href": "tutorials/basic_commands/logical_comparisons.html#logical-negation",
    "title": "Logical Comparisons",
    "section": "Logical Negation",
    "text": "Logical Negation\nWe can negate any logical condition by prepending the ‘!’ character\n\ny &gt; x\n\n[1] FALSE\n\n!y &gt; x\n\n[1] TRUE\n\ny == w\n\n[1] TRUE\n\n!y == w\n\n[1] FALSE\n\n\nRather than negating an equality check, we will typically use the special “not-equal” operator, !=.\n\ny == w\n\n[1] TRUE\n\ny != w\n\n[1] FALSE",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Logical Comparisons"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/logical_comparisons.html#combining-conditions",
    "href": "tutorials/basic_commands/logical_comparisons.html#combining-conditions",
    "title": "Logical Comparisons",
    "section": "Combining Conditions",
    "text": "Combining Conditions\nWe can create more complex logical conditions with the AND and OR operators: & and |.\n\ny == w & y &lt; x\n\n[1] TRUE\n\ny == w & y &gt; x\n\n[1] FALSE\n\ny == w | y &gt; x\n\n[1] TRUE\n\n\n\n\n\n\n\n\nPractice\n\n\n\nUse a single line of code to generate a logical value (i.e., TRUE/FALSE) indicating if the value of the ‘weeks’ object you created above is evenly divisible by 7.\n\n Interactive Editor Hint Solution\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nUse x %% 7 to calculate the remainder after dividing x by 7.\nIf you’re getting unexpected results, consider using parentheses to ensures the intended order of operations.\n\nIn R, the modulo operator, %%, takes precedence over arithmetic operations like multiplication.\n\n\n\n\n\n(weeks %% 7) == 0\n\n[1] FALSE\n\n\nIf the remainder of dividing weeks by 7 is zero, we know that the value of weeks is evenly divisible by 7.",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Logical Comparisons"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/fundamentals.html",
    "href": "tutorials/basic_commands/fundamentals.html",
    "title": "Fundamental Interactions",
    "section": "",
    "text": "Reading\n\n\n\nR4DS 2.1: Coding Basics\n\n\nAmong the simplest possible commands you could execute would be using R as a very over-powered pocket calculator. In the examples shown below, we evaluate a few simple arithmetic expressions involving two integer values.\n\n## Add 2 and 2\n2 + 2\n\n[1] 4\n\n## Subtract 6 from 14\n14 - 6\n\n[1] 8\n\n## Multiply 3 and 4\n3 * 4\n\n[1] 12\n\n## Divide 225 by 15\n225 / 15\n\n[1] 15\n\n\n\n\n\n\n\n\nPractice\n\n\n\n\nCalculate the number of whole days left in the month.\nCalculate the number of weeks left in the month.\n\nAccount for partial weeks with a decimal-valued answer.\n\n\n\n Interactive Editor Solution\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAt time-of-writing, it’s 18 July. Since July has 31 days, we get 13 days remaining in the month.\n\n31 - 18\n\n[1] 13\n\n\nTo find the number of remaining weeks, I’ll just divide the answer from above by 7.\n\n13 / 7\n\n[1] 1.857143",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Fundamental Interactions"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/fundamentals.html#r-as-a-calculator",
    "href": "tutorials/basic_commands/fundamentals.html#r-as-a-calculator",
    "title": "Fundamental Interactions",
    "section": "",
    "text": "Reading\n\n\n\nR4DS 2.1: Coding Basics\n\n\nAmong the simplest possible commands you could execute would be using R as a very over-powered pocket calculator. In the examples shown below, we evaluate a few simple arithmetic expressions involving two integer values.\n\n## Add 2 and 2\n2 + 2\n\n[1] 4\n\n## Subtract 6 from 14\n14 - 6\n\n[1] 8\n\n## Multiply 3 and 4\n3 * 4\n\n[1] 12\n\n## Divide 225 by 15\n225 / 15\n\n[1] 15\n\n\n\n\n\n\n\n\nPractice\n\n\n\n\nCalculate the number of whole days left in the month.\nCalculate the number of weeks left in the month.\n\nAccount for partial weeks with a decimal-valued answer.\n\n\n\n Interactive Editor Solution\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAt time-of-writing, it’s 18 July. Since July has 31 days, we get 13 days remaining in the month.\n\n31 - 18\n\n[1] 13\n\n\nTo find the number of remaining weeks, I’ll just divide the answer from above by 7.\n\n13 / 7\n\n[1] 1.857143",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Fundamental Interactions"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/fundamentals.html#comments",
    "href": "tutorials/basic_commands/fundamentals.html#comments",
    "title": "Fundamental Interactions",
    "section": "Comments",
    "text": "Comments\n\n\n\n\n\n\n\n\nReading\n\n\n\nR4DS 2.2: Comments\n\n\nThe comment character in R is #. Each commented line must be preceded by a # symbol. There are no block comments in R. Comments are not evaluated when you run your code\nRun the following R code to generate two integer vectors and print the results.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn the following code, the expression 1:10 is “commented out”, so R doesn’t evaluate that line. So, running the code will only print the second vector.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Fundamental Interactions"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/fundamentals.html#assignment",
    "href": "tutorials/basic_commands/fundamentals.html#assignment",
    "title": "Fundamental Interactions",
    "section": "Assignment",
    "text": "Assignment\n\n\n\n\n\n\n\n\nReading\n\n\n\nR4DS 2.3: Object Names\n\n\n\n\n\n\n\n\n\nAdvanced Reading\n\n\n\nAdvanced R 2.2: Binding Basics\n\n\n\nTo do anything useful, we need to create objects that hold data. We ‘assign’ values to objects via the ‘assignment’ operator, &lt;-.\nThe following code assigns the values 7, 2.5, and \"foo\" to the objects x, y, and z, respectively.\n\nx &lt;- 7\ny &lt;- 2.5\nz &lt;- \"foo\"\n\nNotice the lack of printed output. These three commands create three new objects in your environment (x, y, z) that store the assigned data values (7, 2.5, \"foo\"). However, we haven’t yet asked R to do anything with those stored values, so we don’t see any printed output.\nTo view the contents of an object, we can evaluate the object’s name without assignment.\nRun the following code to print the values saved as x and y.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also create new objects by assigning them the values of existing objects.\nThe following code creates a new object, w, that takes the value of the existing object z. When we print the value of w, you can see that it has the same value as z.\n\nw &lt;- z\nw\n\n[1] \"foo\"\n\nz\n\n[1] \"foo\"\n\n\nWhen we create w above, we are not replacing z with w: we’re making a copy of z and calling that copy w. So, both w and z are still available. In almost all cases, R will copy objects during assignment. This behavior is good to keep in mind when you’re working with larger datasets: you can quickly flood your memory with unnecessary copies of your data, if you’re not careful.",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Fundamental Interactions"
    ]
  },
  {
    "objectID": "quizzes/packages/questions/install_calls.html",
    "href": "quizzes/packages/questions/install_calls.html",
    "title": "Question",
    "section": "",
    "text": "Which of the following commands will install the lavaan package from CRAN?\n\n\n\ninstall.packages(\"lavaan\")\ninstall.packages(\"lavaan\", repos = \"https://cloud.r-project.org\")\ninstall.packages(\"lavaan\", lib = \"~/R/my_packages/\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"dplyr\", repos = \"https://cloud.r-project.org\")\nremotes::install_github(\"yrosseel/lavaan\")\nlibrary(lavaan)\nls(lavaan)\nhelp(lavaan)"
  },
  {
    "objectID": "quizzes/packages/questions/install_calls.html#answerlist",
    "href": "quizzes/packages/questions/install_calls.html#answerlist",
    "title": "Question",
    "section": "",
    "text": "install.packages(\"lavaan\")\ninstall.packages(\"lavaan\", repos = \"https://cloud.r-project.org\")\ninstall.packages(\"lavaan\", lib = \"~/R/my_packages/\")\ninstall.packages(\"dplyr\")\ninstall.packages(\"dplyr\", repos = \"https://cloud.r-project.org\")\nremotes::install_github(\"yrosseel/lavaan\")\nlibrary(lavaan)\nls(lavaan)\nhelp(lavaan)"
  },
  {
    "objectID": "quizzes/packages/questions/install_calls.html#answerlist-1",
    "href": "quizzes/packages/questions/install_calls.html#answerlist-1",
    "title": "Question",
    "section": "Answerlist",
    "text": "Answerlist\n\nCorrect: The simple case\nCorrect: Explicitly specifying the CRAN mirror to use\nCorrect: Installing from CRAN, but installing into a non-standard library location\nWrong: Installing dplyr\nWrong: Installing dplyr\nWrong: Installing the development version of lavaan from GitHub\nWrong: Loading the package, not installing\nWrong: This is a misuse of the ls() function\nWrong: Accessing the help file for the lavaan() function"
  },
  {
    "objectID": "quizzes/help/questions/default_arguments2.html",
    "href": "quizzes/help/questions/default_arguments2.html",
    "title": "Question",
    "section": "",
    "text": "Use the following help file excerpt to answer the question below.\n\n\n\n\n\n\n\n\ncor\nR Documentation\n\n\n\n\n\n\n\n\n\nvar(x, y = NULL, na.rm = FALSE, use)\n\ncov(x, y = NULL, use = \"everything\",\n    method = c(\"pearson\", \"kendall\", \"spearman\"))\n\ncor(x, y = NULL, use = \"everything\",\n    method = c(\"pearson\", \"kendall\", \"spearman\"))\n\ncov2cor(V)\n\n\n\n\n\n\n\n\nWhat is the default value for the use argument of the cor() function?\n\n\n\n\"everything\"\n\"Everything\n\"spearman\"\n\"pearson\"\n\"kendall\"\nc(\"pearson\", \"spearman\", \"kendall\")\nNULL\nmethod\ny\nx\nThe use argument does not have a defined default value."
  },
  {
    "objectID": "quizzes/help/questions/default_arguments2.html#answerlist",
    "href": "quizzes/help/questions/default_arguments2.html#answerlist",
    "title": "Question",
    "section": "",
    "text": "\"everything\"\n\"Everything\n\"spearman\"\n\"pearson\"\n\"kendall\"\nc(\"pearson\", \"spearman\", \"kendall\")\nNULL\nmethod\ny\nx\nThe use argument does not have a defined default value."
  },
  {
    "objectID": "quizzes/help/questions/default_arguments2.html#answerlist-1",
    "href": "quizzes/help/questions/default_arguments2.html#answerlist-1",
    "title": "Question",
    "section": "Answerlist",
    "text": "Answerlist\n\nCorrect\nWrong: The “E” should be lowercase\nWrong: This is one of the possible methods\nWrong: This is one of the possible methods\nWrong: This is one of the possible methods\nWrong: These are all of the possible methods\nWrong: This is the default value for y\nWrong: This is an argument name\nWrong: This is an argument name\nWrong: This is an argument name\nWrong: There is a default value defined for use."
  },
  {
    "objectID": "quizzes/help/questions/argument_order.html",
    "href": "quizzes/help/questions/argument_order.html",
    "title": "Question",
    "section": "",
    "text": "Which section of an R package help file would you reference to learn the order in which the function arguments are specified in the function definition?\n\n\n\nDescription\nUsage\nArguments\nDetails\nValue\nSee Also\nExamples"
  },
  {
    "objectID": "quizzes/help/questions/argument_order.html#answerlist",
    "href": "quizzes/help/questions/argument_order.html#answerlist",
    "title": "Question",
    "section": "",
    "text": "Description\nUsage\nArguments\nDetails\nValue\nSee Also\nExamples"
  },
  {
    "objectID": "quizzes/functions/questions/function_calls.html",
    "href": "quizzes/functions/questions/function_calls.html",
    "title": "Question",
    "section": "",
    "text": "Which of the following options represent R function calls?\n\n\n\nrnorm(n = 100)\nmean(x, trim = 0.1, na.rm = TRUE)\n.libPaths()\n\"foo\"\nbar\ny\nTRUE\n3.14159\nInf\nNA"
  },
  {
    "objectID": "quizzes/functions/questions/function_calls.html#answerlist",
    "href": "quizzes/functions/questions/function_calls.html#answerlist",
    "title": "Question",
    "section": "",
    "text": "rnorm(n = 100)\nmean(x, trim = 0.1, na.rm = TRUE)\n.libPaths()\n\"foo\"\nbar\ny\nTRUE\n3.14159\nInf\nNA"
  },
  {
    "objectID": "quizzes/functions/questions/function_calls.html#answerlist-1",
    "href": "quizzes/functions/questions/function_calls.html#answerlist-1",
    "title": "Question",
    "section": "Answerlist",
    "text": "Answerlist\n\nCorrect. This function call would generate 100 random standard normal deviates.\nCorrect. This function call would calculate the trimmed mean of x, ignoring any missing values.\nCorrect. This function call will list the library paths where R will install packages on your system.\nThis is a length-one character vector.\nThis is a symbol (i.e., the name of an object).\nThis is a symbol (i.e., the name of an object).\nThis is a length-one logical vector.\nThis is a length-one numeric vector.\nThis is R’s infinite value code.\nThis is R’s missing value code."
  },
  {
    "objectID": "quizzes/basic_commands/questions/logical.html",
    "href": "quizzes/basic_commands/questions/logical.html",
    "title": "Question",
    "section": "",
    "text": "Which of the following expressions will return TRUE?\n\n\n\n\"foo\" != \"bar\"\n(8 + 6) &lt; (8 * 6)\n(8 - 1) == 7 & 7 &gt;= (14 / 2)\n\"alice\" == \"bob\" | \"alice\" == \"alice\"\n!(6 &gt; 7)\nTRUE\nFALSE\n\"foo\" == \"bar\"\n(8 - 1) == 7 & 7 &gt; (14 / 2)\n\"alice\" == \"bob\" | \"alice\" != \"alice\"\n\"alice\" == \"bob\" & \"alice\" == \"alice\"\n!TRUE\nTRUE & FALSE"
  },
  {
    "objectID": "quizzes/basic_commands/questions/logical.html#answerlist",
    "href": "quizzes/basic_commands/questions/logical.html#answerlist",
    "title": "Question",
    "section": "",
    "text": "\"foo\" != \"bar\"\n(8 + 6) &lt; (8 * 6)\n(8 - 1) == 7 & 7 &gt;= (14 / 2)\n\"alice\" == \"bob\" | \"alice\" == \"alice\"\n!(6 &gt; 7)\nTRUE\nFALSE\n\"foo\" == \"bar\"\n(8 - 1) == 7 & 7 &gt; (14 / 2)\n\"alice\" == \"bob\" | \"alice\" != \"alice\"\n\"alice\" == \"bob\" & \"alice\" == \"alice\"\n!TRUE\nTRUE & FALSE"
  },
  {
    "objectID": "quizzes/basic_commands/questions/logical.html#answerlist-1",
    "href": "quizzes/basic_commands/questions/logical.html#answerlist-1",
    "title": "Question",
    "section": "Answerlist",
    "text": "Answerlist\n\nTRUE: “foo” is not equal to “bar”\nTRUE: 14 is strictly less than 48\nTRUE: 7 is equal to 7, and 7 is greater than or equal to 7\nTRUE: “alice” is not equal to “bob”, but “alice is equal to”alice”\nTRUE: 6 is not strictly greater than 7, and that result is negated\nTRUE: Trivially\nFALSE: Trivially\nFALSE: “foo” is not equal to “bar”\nFALSE: 7 is equal to 7, but 7 is not strictly greater than 7\nFALSE: “alice” is not equal to “bob”, and “alice” is equal to “alice”\nFALSE: “alice” is not equal to “bob”\nFALSE: Trivial negation\nFALSE: Trivially"
  },
  {
    "objectID": "quizzes/basic_commands/questions/arithmetic.html",
    "href": "quizzes/basic_commands/questions/arithmetic.html",
    "title": "Question",
    "section": "",
    "text": "Question\nWhat value will the following R code produce?\n(2 * 3 + 4) / 2\n\n\nSolution\nBy applying the appropriate order of operations, we get 5.\n\n\nMeta-information\nexname: Arithmetic extype: num exsolution: 5\n\n\n\n\n Back to top"
  },
  {
    "objectID": "in_progress.html",
    "href": "in_progress.html",
    "title": "In Progress",
    "section": "",
    "text": "Sorry, we’re still building the page you’ve requested.\nIt’s almost done…really.\nWe’re just working through a few minor issues…\n\n\n\nImage Source"
  },
  {
    "objectID": "conclusion.html",
    "href": "conclusion.html",
    "title": "Conclusion",
    "section": "",
    "text": "Congratulations! You’ve completed the First Steps module!",
    "crumbs": [
      "Open-Stat-Prog",
      "Conclusion"
    ]
  },
  {
    "objectID": "conclusion.html#learning-goals",
    "href": "conclusion.html#learning-goals",
    "title": "Conclusion",
    "section": "Learning Goals",
    "text": "Learning Goals\nNow that you’ve completing this module, you should be able to:\n\nBasic Commands\n\nCreate simple R objects\nConduct simple mathematical calculations involving R objects\nConduct simple logical comparisons between R objects\n\n\n\nR Functions\n\nRecognize the R functions in a section of R code\nGive a conceptual overview of how R functions operate\nCall R functions to perform calculations on R objects\n\n\n\nAdd-On Packages\n\nExplain the procedure required to install, load, and use an R package\nInstall new R packages from a remote package repository\nLoad an R package\nUse the functions provided by add-on packages\n\n\n\nGetting Help\n\nAccess the documentation for functions provided by installed packages\nExplain the purpose of the sections in an R help file\nUse the information in an R help file to learn how to use an unfamiliar R function",
    "crumbs": [
      "Open-Stat-Prog",
      "Conclusion"
    ]
  },
  {
    "objectID": "conclusion.html#next-steps",
    "href": "conclusion.html#next-steps",
    "title": "Conclusion",
    "section": "Next Steps",
    "text": "Next Steps\nIf you want to continue with your R learning journey, we recommend following the Data Types module next. Click the button below to start the next module.\n\n\n Next Module",
    "crumbs": [
      "Open-Stat-Prog",
      "Conclusion"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "First Steps",
    "section": "",
    "text": "Welcome to the First Steps module. In this module, you will take the first steps in your R programming journey by learning the basics of R usage. The module content is broken into four tutorials:\nEach tutorial will comprise a series of interactive lessons with practice problems embedded throughout. After you complete each tutorial, you will have the opportunity to complete a knowledge quiz to check your learning.",
    "crumbs": [
      "Open-Stat-Prog",
      "Overview"
    ]
  },
  {
    "objectID": "index.html#learning-goals",
    "href": "index.html#learning-goals",
    "title": "First Steps",
    "section": "Learning Goals",
    "text": "Learning Goals\nAfter completing this module, you will be able to:\n\nBasic Commands\n\nCreate simple R objects\nConduct simple mathematical calculations involving R objects\nConduct simple logical comparisons between R objects\n\n\n\nR Functions\n\nRecognize the R functions in a section of R code\nGive a conceptual overview of how R functions operate\nCall R functions to perform calculations on R objects\n\n\n\nAdd-On Packages\n\nExplain the procedure required to install, load, and use an R package\nInstall new R packages from a remote package repository\nLoad an R package\nUse the functions provided by add-on packages\n\n\n\nGetting Help\n\nAccess the documentation for functions provided by installed packages\nExplain the purpose of the sections in an R help file\nUse the information in an R help file to learn how to use an unfamiliar R function\n\nClick the button below to get started with the first tutorial.\n\n\n Begin Tutorial",
    "crumbs": [
      "Open-Stat-Prog",
      "Overview"
    ]
  },
  {
    "objectID": "quizzes/basic_commands/index.html",
    "href": "quizzes/basic_commands/index.html",
    "title": "Knowledge Quiz: Basic Commands",
    "section": "",
    "text": "Note\n\n\n\n\nClick the check-mark button to check your answer.\nClick the question-mark button to see an explanation of the solution.\n\n\n\n\n\n\nWhich of the following commands represents the recommended way to assign the value 7 to the object y?\n\ny |&gt; 7y == 7y + 7y &lt;- 7y &lt; 7\n\n\n\nAlthough there are three valid assignment operators: &lt;-, -&gt;, =, only the left-facing arrow is recommended by most style guides.\n\nThis is a misuse of the native R pipe operator.\nThis is a logical comparison. We’re checking if the value of y is equal to the 7.\nThis command adds the value of y to the value of 7 and prints the result.\nCorrect\nThis is a logical comparison. We’re checking if the value of y is less than 7.\n\n\n\n\n\nWhat value will the following R code produce?\n(2 * 3 + 4) / 2\n\n\n\nBy applying the appropriate order of operations, we get 5.\n\n\n\n\nWhich of the following expressions will return TRUE?\n\n\"alice\" == \"bob\" | \"alice\" == \"alice\"!(6 &gt; 7)TRUE & FALSE\"alice\" == \"bob\" | \"alice\" != \"alice\"(8 + 6) &lt; (8 * 6)!TRUE\n\n\n\n\nTRUE: “alice” is not equal to “bob”, but “alice is equal to”alice”\nTRUE: 6 is not strictly greater than 7, and that result is negated\nFALSE: Trivially\nFALSE: “alice” is not equal to “bob”, and “alice” is equal to “alice”\nTRUE: 14 is strictly less than 48\nFALSE: Trivial negation\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Knowledge Quiz"
    ]
  },
  {
    "objectID": "quizzes/basic_commands/questions/assignment.html",
    "href": "quizzes/basic_commands/questions/assignment.html",
    "title": "Question",
    "section": "",
    "text": "Which of the following commands represents the recommended way to assign the value 7 to the object y?\n\n\n\ny &lt;- 7\ny &lt;- 6\ny = 7\n7 &lt;- y\n7 -&gt; y\ny == 7\ny |&gt; 7\ny &lt; 7\ny + 7"
  },
  {
    "objectID": "quizzes/basic_commands/questions/assignment.html#answerlist",
    "href": "quizzes/basic_commands/questions/assignment.html#answerlist",
    "title": "Question",
    "section": "",
    "text": "y &lt;- 7\ny &lt;- 6\ny = 7\n7 &lt;- y\n7 -&gt; y\ny == 7\ny |&gt; 7\ny &lt; 7\ny + 7"
  },
  {
    "objectID": "quizzes/basic_commands/questions/assignment.html#answerlist-1",
    "href": "quizzes/basic_commands/questions/assignment.html#answerlist-1",
    "title": "Question",
    "section": "Answerlist",
    "text": "Answerlist\n\nCorrect\nThat’s the correct assignment operator, but this command assigns the wrong value.\nWhile = is a legal assignment operator, using an equals sign for assignment is not recommended style.\nThis isn’t legal R code. This command attempts to assign the value y to the variable 7, but variable names can’t begin with numbers.\nThis is technically valid assignment, but putting the variable on the right-hand side of the assignment operator is not recommended style.\nThis is a logical comparison. We’re checking if the value of y is equal to the 7.\nThis is a misuse of the native R pipe operator.\nThis is a logical comparison. We’re checking if the value of y is less than 7.\nThis command adds the value of y to the value of 7 and prints the result."
  },
  {
    "objectID": "quizzes/functions/index.html",
    "href": "quizzes/functions/index.html",
    "title": "Knowledge Quiz: Functions",
    "section": "",
    "text": "Note\n\n\n\n\nClick the check-mark button to check your answer.\nClick the question-mark button to see an explanation of the solution.\n\n\n\n\n\n\nWhich of the following options represent R function calls?\n\n.libPaths()mean(x, trim = 0.1, na.rm = TRUE)bar\"foo\"NAy\n\n\n\nYou can recognize a valid function call by the pattern: FUNCTION_NAME().\n\nCorrect. This function call will list the library paths where R will install packages on your system.\nCorrect. This function call would calculate the trimmed mean of x, ignoring any missing values.\nThis is a symbol (i.e., the name of an object).\nThis is a length-one character vector.\nThis is R’s missing value code.\nThis is a symbol (i.e., the name of an object).\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Functions",
      "Knoweldge Quiz"
    ]
  },
  {
    "objectID": "quizzes/help/index.html",
    "href": "quizzes/help/index.html",
    "title": "Knowledge Quiz: Getting Help",
    "section": "",
    "text": "Note\n\n\n\n\nClick the check-mark button to check your answer.\nClick the question-mark button to see an explanation of the solution.\n\n\n\n\n\n\nWhich section of an R package help file would you reference to learn the order in which the function arguments are specified in the function definition?\n\nUsageExamplesDescriptionArgumentsValue\n\n\n\nThe Usage section shows all the possible arguments for a function and the order in which those arguments are defined.\n\n\n\n\nWhich section of an R package help file would you reference to learn the default values for a function’s arguments.\n\nDetailsUsageSee AlsoValueDescription\n\n\n\nBoth the Usage and Arguments sections will show the default values for arguments that have default values defined.\n\n\n\n\nUse the following help file excerpt to answer the question below.\n\n\n\n\n\n\n\n\ncor\nR Documentation\n\n\n\n\n\nCorrelation, Variance and Covariance (Matrices)\n\nUsage\n\nvar(x, y = NULL, na.rm = FALSE, use)\n\ncov(x, y = NULL, use = \"everything\",\n    method = c(\"pearson\", \"kendall\", \"spearman\"))\n\ncor(x, y = NULL, use = \"everything\",\n    method = c(\"pearson\", \"kendall\", \"spearman\"))\n\ncov2cor(V)\n\n\n\n\n\n\n\n\nWhat is the default value for the use argument of the cor() function?\n\nc(\"pearson\", \"spearman\", \"kendall\")\"pearson\"methodNULL\"everything\"\n\n\n\nThe default value for the use argument is \"everything\".\n\nWrong: These are all of the possible methods\nWrong: This is one of the possible methods\nWrong: This is an argument name\nWrong: This is the default value for y\nCorrect\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Documentation",
      "Knowledge Quiz"
    ]
  },
  {
    "objectID": "quizzes/help/questions/default_arguments1.html",
    "href": "quizzes/help/questions/default_arguments1.html",
    "title": "Question",
    "section": "",
    "text": "Which section of an R package help file would you reference to learn the default values for a function’s arguments.\n\n\n\nDescription\nUsage\nArguments\nDetails\nValue\nSee Also\nExamples"
  },
  {
    "objectID": "quizzes/help/questions/default_arguments1.html#answerlist",
    "href": "quizzes/help/questions/default_arguments1.html#answerlist",
    "title": "Question",
    "section": "",
    "text": "Description\nUsage\nArguments\nDetails\nValue\nSee Also\nExamples"
  },
  {
    "objectID": "quizzes/packages/index.html",
    "href": "quizzes/packages/index.html",
    "title": "Knowledge Quiz: Add-On Packages",
    "section": "",
    "text": "Note\n\n\n\n\nClick the check-mark button to check your answer.\nClick the question-mark button to see an explanation of the solution.\n\n\n\n\n\n\nWhich of the following commands will install the lavaan package from CRAN?\n\nlibrary(lavaan)install.packages(\"dplyr\", repos = \"https://cloud.r-project.org\")ls(lavaan)help(lavaan)install.packages(\"lavaan\", lib = \"~/R/my_packages/\")\n\n\n\n\nWrong: Loading the package, not installing\nWrong: Installing dplyr\nWrong: This is a misuse of the ls() function\nWrong: Accessing the help file for the lavaan() function\nCorrect: Installing from CRAN, but installing into a non-standard library location\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Packages",
      "Knowledge Quiz"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/environments.html",
    "href": "tutorials/basic_commands/environments.html",
    "title": "Environments",
    "section": "",
    "text": "Advanced Reading\n\n\n\nAdvanced R: Environments\n\n\nEvery R command is executed in a particular environment. Conceptually, you can think of R environments as collections of the objects that R currently has stored in working memory. At this point, you only need to consider one of R’s several types of environment: the Global Environment.\n\n\nThe global environment is the highest-level environment that R maintains. This environment contains all of the objects you define in your R session. The interactions described below all interface with the global environment. The Environment tab in RStudio shows the contents of the global environment, by default.",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Environments"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/environments.html#what-is-an-environment",
    "href": "tutorials/basic_commands/environments.html#what-is-an-environment",
    "title": "Environments",
    "section": "",
    "text": "Advanced Reading\n\n\n\nAdvanced R: Environments\n\n\nEvery R command is executed in a particular environment. Conceptually, you can think of R environments as collections of the objects that R currently has stored in working memory. At this point, you only need to consider one of R’s several types of environment: the Global Environment.\n\n\nThe global environment is the highest-level environment that R maintains. This environment contains all of the objects you define in your R session. The interactions described below all interface with the global environment. The Environment tab in RStudio shows the contents of the global environment, by default.",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Environments"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/environments.html#interacting-with-the-environment",
    "href": "tutorials/basic_commands/environments.html#interacting-with-the-environment",
    "title": "Environments",
    "section": "Interacting with the Environment",
    "text": "Interacting with the Environment\nWe can use the ls() function to list the contents of the current environment.\n\n## The environment is empty because we haven't defined any objects\nls()\n\ncharacter(0)\n\n## Create some objects\nx &lt;- 7\ny &lt;- 8\nz &lt;- 9\nname &lt;- \"bob\"\nage &lt;- 38\n\n## View the updated contents of the environment\nls()\n\n[1] \"age\"  \"name\" \"x\"    \"y\"    \"z\"   \n\n\nThe rm() function will remove an object from the environment. The following code will remove x from the environment.\n\nrm(x) # Remove 'x' from the environment\nls()  # Check the results\n\n[1] \"age\"  \"name\" \"y\"    \"z\"   \n\n\n\n\n\n\n\n\nPractice\n\n\n\n\nUse the ls() function to view the contents of the environment.\nUse the rm() function to remove age from the environment.\nUse ls() to check your work.\n\n\n Interactive Editor Solution\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nls()\n\n[1] \"age\"  \"name\" \"y\"    \"z\"   \n\nrm(age)\nls()\n\n[1] \"name\" \"y\"    \"z\"",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Environments"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/index.html",
    "href": "tutorials/basic_commands/index.html",
    "title": "Basic Commands",
    "section": "",
    "text": "At it’s most purely distilled level, all the R programming and data analysis that you will ever do reduces to evaluating sequences of expressions. Viewed through one more layer of abstraction, the purpose of these expressions will be to implement some aspect of just two tasks:\n\nCreate a new R object\nProcess an existing R object\n\nThat’s it: everything you will ever do with R can be conceptualized as some combination of those two tasks. Of course, I’m being intentionally pedantic. Although, the statement above is technically true, the practical complexity that can arise from programmatically creating and processing abstract objects is virtually limitless.\nIn this tutorial, we’ll begin at the beginning by introducing the basic building blocks of all your future R analyses. We start by covering the most fundamental commands in the R programming language: the core set of commands from which originates all the myriad complexity R has to offer.\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/mathematical_operators.html",
    "href": "tutorials/basic_commands/mathematical_operators.html",
    "title": "Mathematical Operators",
    "section": "",
    "text": "All of the familiar arithmetic operators are available in R. When we do arithmetic on named R objects, the values stored in those objects are used to evaluate the expression.\nThe following code will add, subtract, multiply, and divide the values stored as y and x.\n\n## First, define a few objects to use below.\nx &lt;- 2.5\ny &lt;- 7\nz &lt;- 5\n\n## Show some basic arithmetic operations\ny + x\n\n[1] 9.5\n\ny - x\n\n[1] 4.5\n\ny * x\n\n[1] 17.5\n\ny / x\n\n[1] 2.8",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/mathematical_operators.html#arithmetic",
    "href": "tutorials/basic_commands/mathematical_operators.html#arithmetic",
    "title": "Mathematical Operators",
    "section": "",
    "text": "All of the familiar arithmetic operators are available in R. When we do arithmetic on named R objects, the values stored in those objects are used to evaluate the expression.\nThe following code will add, subtract, multiply, and divide the values stored as y and x.\n\n## First, define a few objects to use below.\nx &lt;- 2.5\ny &lt;- 7\nz &lt;- 5\n\n## Show some basic arithmetic operations\ny + x\n\n[1] 9.5\n\ny - x\n\n[1] 4.5\n\ny * x\n\n[1] 17.5\n\ny / x\n\n[1] 2.8",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/mathematical_operators.html#powers-roots",
    "href": "tutorials/basic_commands/mathematical_operators.html#powers-roots",
    "title": "Mathematical Operators",
    "section": "Powers & Roots",
    "text": "Powers & Roots\nWe use the caret character, ^, to specify exponents. The following code will square and cube the value of y.\n\ny^2\n\n[1] 49\n\ny^3\n\n[1] 343\n\n\nThe sqrt() function returns the square root of it’s argument (i.e., the value we specify inside the parentheses). The following code calculates the square root of y.\n\nsqrt(y)\n\n[1] 2.645751\n\n\nFor other roots, we can use fractional exponents.\n\ny^(1/3) # cube root of y\n\n[1] 1.912931\n\ny^(1/4) # quartic root of y\n\n[1] 1.626577",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/mathematical_operators.html#other-common-operators",
    "href": "tutorials/basic_commands/mathematical_operators.html#other-common-operators",
    "title": "Mathematical Operators",
    "section": "Other Common Operators",
    "text": "Other Common Operators\nR also includes many special functions for the most common mathematical operations.\n\nlog(y)   # natural logarithm of y\n\n[1] 1.94591\n\nlog10(y) # log base 10 of y\n\n[1] 0.845098\n\nlog2(y)  # log base 2 of y\n\n[1] 2.807355\n\nexp(x) # exponentiate x\n\n[1] 12.18249\n\ny %% x # modulo: remainder after dividing y by x\n\n[1] 2\n\nfoo &lt;- -3.14159\n\nround(foo, 3) # round 'foo' to 3 decimal places\n\n[1] -3.142\n\nfloor(foo)    # round 'foo' down to the nearest whole number\n\n[1] -4\n\nceiling(foo)  # round 'foo' up to the nearest whole number\n\n[1] -3\n\nabs(foo) # absolute value of 'foo'\n\n[1] 3.14159\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that log(y) calculates the natural logarithm of y, \\(\\ln(y)\\). If you want the “ordinary” base-10 log, you need to use the log10() function.\n\n\n\n\n\n\n\n\nPractice\n\n\n\n\nCreate an object called age that takes the value of your age in whole years.\nUse the age object you created in above to create a second object called weeks that takes the value of your age in whole weeks.\n\nAssume 52 weeks in each year.\nDisregard partial years (i.e., assume every year counted in age contains 52 whole weeks).\n\nPrint the value of weeks.\n\n\n Interactive Editor Solution\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nAt time-of-writing, I’m 38 years old. So, these would be my age and weeks objects.\n\nage   &lt;- 38\nweeks &lt;- 38 * 52\nweeks\n\n[1] 1976",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "tutorials/basic_commands/mathematical_operators.html#order-of-operations",
    "href": "tutorials/basic_commands/mathematical_operators.html#order-of-operations",
    "title": "Mathematical Operators",
    "section": "Order of Operations",
    "text": "Order of Operations\nWhen parsing your commands, R will, mostly, scan each line of code from left to right and apply each mathematical operation according to the usual PEMDAS ordering.\nNotice how the following two expressions produce different results.\n\nIn the first line, we first divide x by z and then add y to the result.\nIn the second line, we first add x to y and then divide the result by z.\n\n\ny + x / z\n\n[1] 7.5\n\n(y + x) / z\n\n[1] 1.9\n\n\n\n\n\n\n\n\nPractice\n\n\n\nWhy do the following two expressions produce different answers?\n\n Question Solution\n\n\n\ny^(1/2)\n\n[1] 2.645751\n\ny^1/2\n\n[1] 3.5\n\n\n\n\n\ny^(1/2)\n\n[1] 2.645751\n\nsqrt(y)\n\n[1] 2.645751\n\n\nIn the first case, we’re raising y to the power of \\(\\frac{1}{2}\\).\n\ny^1/2\n\n[1] 3.5\n\ny/2\n\n[1] 3.5\n\n\nIn the second case, we’re first raising y to the power of 1 (which does nothing) and then dividing the result by 2.",
    "crumbs": [
      "Open-Stat-Prog",
      "Basic Commands",
      "Mathematical Operators"
    ]
  },
  {
    "objectID": "tutorials/functions/index.html",
    "href": "tutorials/functions/index.html",
    "title": "R Functions",
    "section": "",
    "text": "Essentially all of your R-based analyses will revolved around calling functions to manipulate the contents of objects stored in the environment and saving those modified objects as new objects.\nSuppose I want to calculate the average of the first five positive integers, \\(\\{1, 2, 3, 4, 5\\}\\). I could directly apply the formula for the mean using nothing but basic arithmetic operators.\n\n(1 + 2 + 3 + 4 + 5) / 5\n\n[1] 3\n\n\nOf course, we won’t get very far with any real-world data analysis if we need to explicitly write out the formula for every single estimate we make. So, we typically call a pre-existing function to do the estimation. The following code calls the mean() function to calculate the average of the values contained in the numeric vector, \\([1, 2, 3, 4, 5]\\), that we’ve created with the : operator (which is also a kind of function).\n\nmean(1:5)\n\n[1] 3\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Open-Stat-Prog",
      "Functions"
    ]
  },
  {
    "objectID": "tutorials/help/default_arguments.html",
    "href": "tutorials/help/default_arguments.html",
    "title": "Default Function Arguments",
    "section": "",
    "text": "As we alluded to in the Functions Section, the Usage section of an R documentation file provides two very important pieces of information about a function’s arguments.",
    "crumbs": [
      "Open-Stat-Prog",
      "Documentation",
      "Default Function Arguments"
    ]
  },
  {
    "objectID": "tutorials/help/default_arguments.html#argument-ordering",
    "href": "tutorials/help/default_arguments.html#argument-ordering",
    "title": "Default Function Arguments",
    "section": "Argument Ordering",
    "text": "Argument Ordering\nWhen you call an R function, you do not have to explicitly write out the argument names, if you supply the argument values in the order that the arguments are specified in the function definition. That’s a mouthful, so let’s look at the matrix() function for a concrete example.\n\n\n\n\n\n\n\n\nmatrix\nR Documentation\n\n\n\n\n\nMatrices\n\nDescription\n\nmatrix creates a matrix from the given set of values.\n\nas.matrix attempts to turn its argument into a matrix.\n\nis.matrix tests if its argument is a (strict) matrix.\n\n\n\nUsage\n\nmatrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE,\n       dimnames = NULL)\n\nas.matrix(x, ...)\n## S3 method for class 'data.frame'\nas.matrix(x, rownames.force = NA, ...)\n\nis.matrix(x)\n\n\n\nArguments\n\n\n\n\n\ndata\nan optional data vector (including a list or expression vector). Non-atomic classed R objects are coerced by as.vector and all attributes discarded.\n\n\nnrow\nthe desired number of rows.\n\n\nncol\nthe desired number of columns.\n\n\nbyrow\nlogical. If FALSE (the default) the matrix is filled by columns, otherwise the matrix is filled by rows.\n\n\ndimnames\na dimnames attribute for the matrix: NULL or a list of length 2 giving the row and column names respectively. An empty list is treated as NULL, and a list of length one as row names. The list can be named, and the list names will be used as names for the dimensions.\n\n\nx\nan R object.\n\n\n...\nadditional arguments to be passed to or from methods.\n\n\nrownames.force\nlogical indicating if the resulting matrix should have character (rather than NULL) rownames. The default, NA, uses NULL rownames if the data frame has ‘automatic’ row.names or for a zero-row data frame.\n\n\n\n\n\n\n\n\n\n\n\nThe usage section of matrix()’s help file tells use that the function takes five arguments:\n\ndata\nnrow\nncol\nbyrow\ndimnames\n\nFurthermore, we see that these five arguments are specified in the order shown above.\nIf we explicitly write out the names for all the arguments in our function call, we can specify the argument values in any order. Hence, the following three lines will produce equivalent results, for example.\n\nmatrix(data = 1:6, nrow = 3, ncol = 2, byrow = FALSE, dimnames = NULL)\n\n\n\n\n1\n4\n\n\n2\n5\n\n\n3\n6\n\n\n\n\nmatrix(nrow = 3, ncol = 2, data = 1:6,byrow = FALSE, dimnames = NULL)\n\n\n\n\n1\n4\n\n\n2\n5\n\n\n3\n6\n\n\n\n\nmatrix(byrow = FALSE, data = 1:6, nrow = 3, ncol = 2, dimnames = NULL)\n\n\n\n\n1\n4\n\n\n2\n5\n\n\n3\n6\n\n\n\n\n\nIf we provide the argument values in the order they are specified in the function definition, we do not need to write out the argument names. So, the following function call will produce the same result as the three above.\n\nmatrix(1:6, 3, 2, FALSE, NULL)\n\n\n\n\n1\n4\n\n\n2\n5\n\n\n3\n6\n\n\n\n\n\nWe can also mix these two approaches, but we have to provide all unnamed argument values first, and provide them in the correct order. The following function calls will also produce the same results as above.\n\nmatrix(1:6, 3, 2, FALSE, dimnames = NULL)\n\n\n\n\n1\n4\n\n\n2\n5\n\n\n3\n6\n\n\n\n\nmatrix(1:6, 3, 2, byrow = FALSE, dimnames = NULL)\n\n\n\n\n1\n4\n\n\n2\n5\n\n\n3\n6\n\n\n\n\nmatrix(1:6, 3, dimnames = NULL, byrow = FALSE, ncol = 2)\n\n\n\n\n1\n4\n\n\n2\n5\n\n\n3\n6\n\n\n\n\n\nWe cannot, however, switch the order of any unnamed argument values. The following code will not reproduce the matrix created above.\n\n## Flip the 'nrow' and 'ncol' arguments\nmatrix(1:6, 2, 3, FALSE, dimnames = NULL)\n\n\n\n\n1\n3\n5\n\n\n2\n4\n6",
    "crumbs": [
      "Open-Stat-Prog",
      "Documentation",
      "Default Function Arguments"
    ]
  },
  {
    "objectID": "tutorials/help/default_arguments.html#default-values",
    "href": "tutorials/help/default_arguments.html#default-values",
    "title": "Default Function Arguments",
    "section": "Default Values",
    "text": "Default Values\nWhen the Usage section shows a value assigned to a function argument, the value shown is the default value for that function argument. For the matrix() function, all five arguments have default values.\n\ndata = NA\nnrow = 1\nncol = 1\nbyrow = FALSE\ndimnames = NULL\n\nWhen a function argument has a defined default value, we do not need to specify a value for that argument in our function call: if we don’t provide an argument value, the argument takes the default value shown in the documentation.\nSo, we could technically call the matrix() function without specifying any arguments.\n\nmatrix()\n\n\n\n\nNA\n\n\n\n\n\nThough, the results are rather boring. Since our function call is entirely parameterized by the default arguments, we get a \\(1 \\times 1\\) matrix containing a single missing datum.\nIn practice, we will almost always specify some argument values, but we will frequently accept some of the default values, as well. The following is a typical example of calling the matrix() function.\n\nmatrix(1:12, nrow = 4)\n\n\n\n\n1\n5\n9\n\n\n2\n6\n10\n\n\n3\n7\n11\n\n\n4\n8\n12\n\n\n\n\n\nIn the above function call, I’ve employed two common shortcuts:\n\nI didn’t name the first argument.\nI only specified values for the two arguments that I wanted to adjust.",
    "crumbs": [
      "Open-Stat-Prog",
      "Documentation",
      "Default Function Arguments"
    ]
  },
  {
    "objectID": "tutorials/help/sections.html",
    "href": "tutorials/help/sections.html",
    "title": "Help File Sections",
    "section": "",
    "text": "R help files can contain diverse information: some are only a few lines long while others contain dozens of pages of information. Not all R help files include all possible sections, but there are a few core sections that tend to show up pretty consistently due to their general usefulness.",
    "crumbs": [
      "Open-Stat-Prog",
      "Documentation",
      "Help File Sections"
    ]
  },
  {
    "objectID": "tutorials/help/sections.html#description",
    "href": "tutorials/help/sections.html#description",
    "title": "Help File Sections",
    "section": "Description",
    "text": "Description\n\nR: Order rows using column values\n  \n  \n  \n  \n  \n  \n\n\n\n  Description\n\n  arrange() orders the rows of a data frame by the values of selected columns.\n  \n    Unlike other dplyr verbs, arrange() largely ignores grouping; you need to explicitly mention grouping\n    variables (or use  .by_group = TRUE) in order to group by them, and functions of variables are\n    evaluated once per data frame, not once per group.\n  \n\n\n\n\n\nAs the name implies, the Description section provides a brief, human-readable description of the functions purpose.",
    "crumbs": [
      "Open-Stat-Prog",
      "Documentation",
      "Help File Sections"
    ]
  },
  {
    "objectID": "tutorials/help/sections.html#usage",
    "href": "tutorials/help/sections.html#usage",
    "title": "Help File Sections",
    "section": "Usage",
    "text": "Usage\n\nR: Order rows using column values\n  \n  \n  \n  \n  \n  \n\n\n\n  Usage\n\n  arrange(.data, ..., .by_group = FALSE)\n\n## S3 method for class 'data.frame'\narrange(.data, ..., .by_group = FALSE, .locale = NULL)\n\n\n\n\n\nThe Usage section shows the fully parameterized function call. In other words, how to call the function. In particular, this section provides several crucial pieces of information.\n\nThe name used to call the function\nThe name of all the function arguments\nThe order of the function arguments\nAny default values defined for function arguments",
    "crumbs": [
      "Open-Stat-Prog",
      "Documentation",
      "Help File Sections"
    ]
  },
  {
    "objectID": "tutorials/help/sections.html#arguments",
    "href": "tutorials/help/sections.html#arguments",
    "title": "Help File Sections",
    "section": "Arguments",
    "text": "Arguments\n\nR: Order rows using column values\n  \n  \n  \n  \n  \n  \n\n\n\n  Arguments\n\n  \n\n\n\n\n\n\n\n.data\nA data frame, data frame extension (e.g. a tibble), or a lazy data frame (e.g. from dbplyr or dtplyr). See Methods, below, for more details.\n\n\n...\n&lt;data-masking&gt; Variables, or functions of variables. Use desc() to sort a variable in descending order.\n\n\n.by_group\nIf TRUE, will sort first by grouping variable. Applies togrouped data frames only.\n\n\n.locale\nThe locale to sort character vectors in.\n\nIf NULL, the default, uses the \"C\" locale unless the dplyr.legacy_locale global option escape hatch is active. See the dplyr-locale help page for more details.\nIf a single string from stringi::stri_locale_list() is supplied, then this will be used as the locale to sort with. For example, \"en\" will sort with the American English locale. This requires the stringi package.\nIf \"C\" is supplied, then character vectors will always be sorted in the C locale. This does not require stringi and is often much faster than supplying a locale identifier.\n\nThe C locale is not the same as English locales, such as \"en\", particularly when it comes to data containing a mix of upper and lower case letters. This is explained in more detail on the locale help page under the ⁠Default locale⁠ section.\n\n\n\n\n\n\n\n\n\nThe Arguments section briefly explains each function argument. As you might suspect, the arguments section will probably be the one you reference most frequently since the information contained herein explains the purpose or each function argument and what type of values you are able to specify for each argument.",
    "crumbs": [
      "Open-Stat-Prog",
      "Documentation",
      "Help File Sections"
    ]
  },
  {
    "objectID": "tutorials/help/sections.html#details",
    "href": "tutorials/help/sections.html#details",
    "title": "Help File Sections",
    "section": "Details",
    "text": "Details\n\nR: Order rows using column values\n  \n  \n  \n  \n  \n  \n\n\n\n  Details\n\n  Missing values\n\n  Unlike base sorting with sort(), NA are:\n\n  \n    \n       always sorted to the end for local data, even when wrapped with desc().\n    \n    \n       treated differently for remote data, depending on the backend.\n    \n  \n\n\n\n\n\nThe Details section expands on the information listed in the Arguments section to provide additional details of function arguments or the functions behavior",
    "crumbs": [
      "Open-Stat-Prog",
      "Documentation",
      "Help File Sections"
    ]
  },
  {
    "objectID": "tutorials/help/sections.html#value",
    "href": "tutorials/help/sections.html#value",
    "title": "Help File Sections",
    "section": "Value",
    "text": "Value\n\nR: Order rows using column values\n  \n  \n  \n  \n  \n  \n\n\n\n  Value\n\n  An object of the same type as .data. The output has the following properties:\n\n  \n    \n       All rows appear in the output, but (usually) in a different place.\n    \n    \n       Columns are not modified.\n    \n    \n       Groups are not modified.\n    \n    \n       Data frame attributes are preserved.\n    \n  \n\n\n\n\n\nThe Value section describes the type of object returned by the function.",
    "crumbs": [
      "Open-Stat-Prog",
      "Documentation",
      "Help File Sections"
    ]
  },
  {
    "objectID": "tutorials/help/sections.html#examples",
    "href": "tutorials/help/sections.html#examples",
    "title": "Help File Sections",
    "section": "Examples",
    "text": "Examples\n\nR: Order rows using column values\n  \n  \n  \n  \n  \n  \n\n\n\n  Examples\n\n  arrange(mtcars, cyl, disp)\narrange(mtcars, desc(disp))\n\n# grouped arrange ignores groups\nby_cyl &lt;- mtcars %&gt;% group_by(cyl)\nby_cyl %&gt;% arrange(desc(wt))\n# Unless you specifically ask:\nby_cyl %&gt;% arrange(desc(wt), .by_group = TRUE)\n\n# use embracing when wrapping in a function;\n# see ?rlang::args_data_masking for more details\ntidy_eval_arrange &lt;- function(.data, var) {\n  .data %&gt;%\n    arrange({{ var }})\n}\ntidy_eval_arrange(mtcars, mpg)\n\n# Use `across()` or `pick()` to select columns with tidy-select\niris %&gt;% arrange(pick(starts_with(\"Sepal\")))\niris %&gt;% arrange(across(starts_with(\"Sepal\"), desc))\n\n\n\n\n\nThe Examples section contains executable R code that demonstrates the function’s primary use-cases.\n\n\n\n\n\n\nPractice\n\n\n\nRun the first line of example code from the Examples section of the arrange() documentation shown above.\n\n Interactive Editor Hint Solution\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nYou can copy and paste the first line of code directly from the examples section into the editor window.\n\n\n\nlibrary(dplyr)\n\narrange(mtcars, cyl, disp)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\nToyota Corolla\n33.9\n4\n71.1\n65\n4.22\n1.835\n19.90\n1\n1\n4\n1\n\n\nHonda Civic\n30.4\n4\n75.7\n52\n4.93\n1.615\n18.52\n1\n1\n4\n2\n\n\nFiat 128\n32.4\n4\n78.7\n66\n4.08\n2.200\n19.47\n1\n1\n4\n1\n\n\nFiat X1-9\n27.3\n4\n79.0\n66\n4.08\n1.935\n18.90\n1\n1\n4\n1\n\n\nLotus Europa\n30.4\n4\n95.1\n113\n3.77\n1.513\n16.90\n1\n1\n5\n2\n\n\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nToyota Corona\n21.5\n4\n120.1\n97\n3.70\n2.465\n20.01\n1\n0\n3\n1\n\n\nPorsche 914-2\n26.0\n4\n120.3\n91\n4.43\n2.140\n16.70\n0\n1\n5\n2\n\n\nVolvo 142E\n21.4\n4\n121.0\n109\n4.11\n2.780\n18.60\n1\n1\n4\n2\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\n\n\nMerc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n\n\nFerrari Dino\n19.7\n6\n145.0\n175\n3.62\n2.770\n15.50\n0\n1\n5\n6\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n0\n4\n4\n\n\nMerc 280C\n17.8\n6\n167.6\n123\n3.92\n3.440\n18.90\n1\n0\n4\n4\n\n\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nMerc 450SE\n16.4\n8\n275.8\n180\n3.07\n4.070\n17.40\n0\n0\n3\n3\n\n\nMerc 450SL\n17.3\n8\n275.8\n180\n3.07\n3.730\n17.60\n0\n0\n3\n3\n\n\nMerc 450SLC\n15.2\n8\n275.8\n180\n3.07\n3.780\n18.00\n0\n0\n3\n3\n\n\nMaserati Bora\n15.0\n8\n301.0\n335\n3.54\n3.570\n14.60\n0\n1\n5\n8\n\n\nAMC Javelin\n15.2\n8\n304.0\n150\n3.15\n3.435\n17.30\n0\n0\n3\n2\n\n\nDodge Challenger\n15.5\n8\n318.0\n150\n2.76\n3.520\n16.87\n0\n0\n3\n2\n\n\nCamaro Z28\n13.3\n8\n350.0\n245\n3.73\n3.840\n15.41\n0\n0\n3\n4\n\n\nFord Pantera L\n15.8\n8\n351.0\n264\n4.22\n3.170\n14.50\n0\n1\n5\n4\n\n\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nPontiac Firebird\n19.2\n8\n400.0\n175\n3.08\n3.845\n17.05\n0\n0\n3\n2\n\n\nChrysler Imperial\n14.7\n8\n440.0\n230\n3.23\n5.345\n17.42\n0\n0\n3\n4\n\n\nLincoln Continental\n10.4\n8\n460.0\n215\n3.00\n5.424\n17.82\n0\n0\n3\n4\n\n\nCadillac Fleetwood\n10.4\n8\n472.0\n205\n2.93\n5.250\n17.98\n0\n0\n3\n4",
    "crumbs": [
      "Open-Stat-Prog",
      "Documentation",
      "Help File Sections"
    ]
  },
  {
    "objectID": "tutorials/packages/installing.html",
    "href": "tutorials/packages/installing.html",
    "title": "Installing Packages",
    "section": "",
    "text": "Fortunately, installing packages is very simple. In most cases, you only need to specify the name of the package that you want to install in the install.packages() function. The following code will install the psych package.\n## Use the default CRAN mirror to install one package\ninstall.packages(\"psych\")\nIf you want to install more than one package, you simply using the concatenation function, c(), to define a character vector giving the names of your desired packages, as shown in the following code.\n## Use the default CRAN mirror to install two packages\ninstall.packages(c(\"mice\", \"lavaan\"))",
    "crumbs": [
      "Open-Stat-Prog",
      "Packages",
      "Installing Packages"
    ]
  },
  {
    "objectID": "tutorials/packages/installing.html#package-repositories",
    "href": "tutorials/packages/installing.html#package-repositories",
    "title": "Installing Packages",
    "section": "Package Repositories",
    "text": "Package Repositories\nIn the ordinary use-case, install.packages() will download the data needed to install a given package from the Comprehensive R Archive Network (CRAN). CRAN is a global network of servers (so-called CRAN mirrors) that each host a complete copy of the database of the available R packages (as well as the Base R components).\nUsually, you don’t need to tell R which of these CRAN mirrors to use because RStudio defines a default mirror that gets used whenever you call install.pacakges(). However, if you want to explicitly specify a different CRAN mirror, you can do so via the repos argument.\n\n## Specify the CRAN mirror a priori\ninstall.packages(c(\"lattice\", \"gridExtra\"), repos = \"http://cloud.r-project.org\")\n\n\nAlternative Repositories\nAlthough doing so is not usually necessary, you can also download R packages from other repositories, in addition to CRAN. The following are some population non-CRAN package repositories.\n\nBioconductor\nR-Universe\n\n\n\nInstalling Development Versions\nMost R package development is done by distributed development teams who collaborate using cloud-based code repository services like GitHub, GitLab, or BitBucket. The remotes package provides several functions that install packages from these code repositories.\n\n## Install the development version of the mice package from GitHub\nremotes::install_github(\"amices/mice\")",
    "crumbs": [
      "Open-Stat-Prog",
      "Packages",
      "Installing Packages"
    ]
  },
  {
    "objectID": "tutorials/packages/installing.html#package-libraries",
    "href": "tutorials/packages/installing.html#package-libraries",
    "title": "Installing Packages",
    "section": "Package Libraries",
    "text": "Package Libraries\nSimilarly, you don’t usually have to tell R where you want to install new packages. If your user doesn’t have write permissions for the default library location, R will ask if you want to install the packages in a different location for which you should have suitable permissions.\nSometimes, this automatic procedure fails (e.g., on employer-administered computers with strict security settings for employees). In such cases—or anytime you want to explicitly define the package library location—you can define the package library via the lib argument.\n\n## Specify a non-standard directory into which the packages will be installed\ninstall.packages(\"mvtnorm\", lib = \"../software\")\n\n\n\n\n\n\n\nPractice\n\n\n\nUse the install.packages() function to install the following packages in the default location (i.e., don’t specify anything for the lib argument).\n\nggplot2\ndplyr\nhaven\n\n\n Interactive Editor Solution\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\ninstall.packages(c(\"ggplot2\", \"dplyr\", \"haven\"))",
    "crumbs": [
      "Open-Stat-Prog",
      "Packages",
      "Installing Packages"
    ]
  }
]